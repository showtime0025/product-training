---
alwaysApply: true
---
# Coding Standards

This document outlines the coding standards and best practices for the Product Training application. These standards ensure consistency, maintainability, and code quality across the entire project.

## Table of Contents

1. [Project Structure](#project-structure)
2. [Design Tokens System](#design-tokens-system)
3. [TypeScript Standards](#typescript-standards)
4. [React Component Standards](#react-component-standards)
5. [CSS and Styling Standards](#css-and-styling-standards)
6. [File Naming Conventions](#file-naming-conventions)
7. [Import and Export Standards](#import-and-export-standards)
8. [Storybook Standards](#storybook-standards)
9. [Testing Standards](#testing-standards)
10. [Documentation Standards](#documentation-standards)
11. [Git and Version Control](#git-and-version-control)

## Project Structure

### Atomic Design Architecture

The project follows the Atomic Design methodology with a clear component hierarchy:

```
src/components/
├── atoms/          # Basic building blocks (Button, Input, Text, Icon)
├── molecules/      # Simple combinations of atoms (Card, FormField, SearchBox)
├── organisms/      # Complex UI components (Header, Footer, ProductList)
└── index.ts        # Barrel exports for clean imports
```

### Design Tokens Structure

The project includes a comprehensive design tokens system:

```
src/tokens/
├── tokens.ts           # Main design tokens definition
├── types.ts            # TypeScript type definitions
├── index.ts            # Barrel exports and utility functions
└── globals.css         # CSS custom properties and global styles
```

### Component Directory Structure

Each component follows this standardized structure:

```
ComponentName/
├── ComponentName.tsx           # Main component file
├── ComponentName.module.css    # Component-specific styles
├── ComponentName.stories.tsx   # Storybook stories
├── ComponentName.mock.json     # Mock data for stories
├── ComponentName.model.json    # Type definitions/model
├── index.ts                    # Barrel export
└── README.md                   # Component documentation (optional)
```

## Design Tokens System

### Token Categories

The design tokens system provides a comprehensive set of design values:

- **Colors**: Primary, secondary, semantic (success, warning, error), neutral, and theme-aware colors
- **Typography**: Font families, sizes, weights, line heights, and letter spacing
- **Spacing**: Consistent spacing scale from 0 to 96 (in rem units)
- **Border Radius**: Standardized border radius values
- **Shadows**: Box shadow definitions for elevation
- **Z-Index**: Layering system for UI elements
- **Breakpoints**: Responsive design breakpoints
- **Transitions**: Duration and easing functions
- **Component Tokens**: Component-specific sizing and spacing

### Token Usage

#### Importing Tokens

```typescript
// Import specific token categories
import { colors, spacing, typography } from '@/tokens';

// Import utility functions
import { getColor, getSpacing, getFontSize } from '@/tokens';

// Import types for type safety
import type { ColorScale, SpacingKey, FontSizeKey } from '@/tokens';
```

#### Using Tokens in Components

```typescript
// In TypeScript/JavaScript
const primaryColor = getColor('primary', '500');
const mediumSpacing = getSpacing('4');
const largeFontSize = getFontSize('lg');
```

#### Using Tokens in CSS

```css
/* Use CSS custom properties */
.component {
  color: var(--color-primary-500);
  padding: var(--spacing-4);
  font-size: var(--font-size-lg);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-md);
}

/* Use utility functions for dynamic values */
.dynamic-component {
  background-color: var(--color-primary-500);
  transition: all var(--transition-duration-fast) var(--transition-easing-ease-in-out);
}
```

### Token Naming Convention

- **Colors**: `--color-{palette}-{scale}` (e.g., `--color-primary-500`)
- **Typography**: `--font-{property}-{size}` (e.g., `--font-size-lg`)
- **Spacing**: `--spacing-{size}` (e.g., `--spacing-4`)
- **Border Radius**: `--border-radius-{size}` (e.g., `--border-radius-md`)
- **Shadows**: `--shadow-{size}` (e.g., `--shadow-md`)
- **Z-Index**: `--z-index-{level}` (e.g., `--z-index-modal`)
- **Breakpoints**: `--breakpoint-{size}` (e.g., `--breakpoint-lg`)
- **Transitions**: `--transition-{property}-{size}` (e.g., `--transition-duration-fast`)

### Component-Specific Tokens

Components can define their own tokens for consistent sizing:

```typescript
// Button component tokens
const buttonHeight = getButtonHeight('md'); // Returns '2.5rem'
const buttonPadding = getButtonPadding('md'); // Returns '0.5rem 1rem'

// Input component tokens
const inputHeight = getInputHeight('lg'); // Returns '3rem'
const inputPadding = getInputPadding('lg'); // Returns '0.75rem 1rem'
```

### Theme Support

The tokens system supports light and dark themes:

```css
/* Light mode (default) */
:root {
  --background: var(--color-background-light);
  --foreground: var(--color-foreground-light);
}

/* Dark mode */
.dark {
  --background: var(--color-background-dark);
  --foreground: var(--color-foreground-dark);
}
```

### Token Type Safety

Use TypeScript types for token safety:

```typescript
import type { ColorScale, SpacingKey, FontSizeKey } from '@/tokens';

// Type-safe token usage
const getComponentStyles = (
  colorScale: ColorScale,
  spacing: SpacingKey,
  fontSize: FontSizeKey
) => {
  return {
    color: getColor('primary', colorScale),
    padding: getSpacing(spacing),
    fontSize: getFontSize(fontSize),
  };
};
```

## TypeScript Standards

### Type Definitions

- **Use explicit interfaces** for component props:
  ```typescript
  export interface ButtonProps {
    variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
    size?: 'sm' | 'md' | 'lg';
    children: React.ReactNode;
    onClick?: () => void;
    disabled?: boolean;
  }
  ```

- **Prefer union types** for limited options:
  ```typescript
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  ```

- **Use generic types** for reusable components:
  ```typescript
  export interface ProductListProps<T = Product> {
    items: T[];
    renderItem: (item: T) => React.ReactNode;
  }
  ```

### Type Safety

- **Enable strict TypeScript** configuration:
  ```json
  {
    "strict": true,
    "noEmit": true,
    "skipLibCheck": true
  }
  ```

- **Use proper type annotations** for function parameters and return values
- **Avoid `any` type** - use `unknown` or specific types instead
- **Use type guards** for runtime type checking

### Path Aliases

- Use the configured path alias `@/*` for imports:
  ```typescript
  import { Button } from '@/components/atoms/Button';
  import { ProductList } from '@/components/organisms/ProductList';
  import { tokens, getColor } from '@/tokens';
  ```

### Component Architecture

- **Create custom components** that follow the design system:
  ```typescript
  export interface ButtonProps {
    variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
    size?: 'sm' | 'md' | 'lg';
    children: React.ReactNode;
    onClick?: () => void;
    disabled?: boolean;
  }
  ```

- **Use design tokens** for consistent styling:
  ```typescript
  const getButtonStyles = (variant: 'primary' | 'secondary') => {
    return {
      backgroundColor: getColor(variant, '500'),
      color: 'white',
      padding: getSpacing('4'),
    };
  };
  ```

- **Build reusable components** that maintain design system consistency

## React Component Standards

### Component Structure

1. **Import order**:
   ```typescript
   // 1. React imports
   import React from 'react';
   
   // 2. Design tokens (if needed)
   import { getColor, getSpacing } from '@/tokens';
   
   // 3. Internal components (atoms, molecules, organisms)
   import { Text } from '../../atoms/Text';
   
   // 4. Styles
   import styles from './ComponentName.module.css';
   ```

2. **Interface definition** before component:
   ```typescript
   export interface ComponentProps {
     // Props definition
   }
   ```

3. **Component declaration** with explicit typing:
   ```typescript
   export const ComponentName: React.FC<ComponentProps> = ({
     // Destructured props with defaults
   }) => {
     // Component logic
   };
   ```

### Props Handling

- **Destructure props** with default values:
  ```typescript
  export const Button: React.FC<ButtonProps> = ({
    variant = 'primary',
    size = 'md',
    children,
    ...props
  }) => {
    // Component implementation
  };
  ```

- **Use rest/spread operator** for additional props:
  ```typescript
  <button
    className={styles.button}
    onClick={onClick}
    disabled={disabled}
    {...props}  // Spread remaining props
  >
    {children}
  </button>
  ```

### Event Handling

- **Use optional chaining** for event handlers:
  ```typescript
  onClick={() => onProductClick?.(product)}
  ```

- **Prevent event propagation** when needed:
  ```typescript
  onClick={(e) => {
    e.stopPropagation();
    onFavorite?.(product);
  }}
  ```

### Conditional Rendering

- **Use early returns** for loading/error states:
  ```typescript
  if (loading) {
    return <LoadingComponent />;
  }
  
  if (error) {
    return <ErrorComponent error={error} />;
  }
  ```

- **Use logical operators** for simple conditions:
  ```typescript
  {showFavorite && (
    <Button variant="ghost" size="sm">
      <Icon name="heart" />
    </Button>
  )}
  ```

### Token Usage in Components

- **Use design tokens for dynamic styling**:
  ```typescript
  const getComponentStyles = (variant: 'primary' | 'secondary') => {
    return {
      backgroundColor: getColor(variant, '500'),
      color: 'white',
      padding: getSpacing('4'),
      borderRadius: getBorderRadius('md'),
    };
  };
  ```

- **Use CSS custom properties** for theme-aware styling:
  ```typescript
  const componentStyle = {
    color: 'var(--color-primary-500)',
    padding: 'var(--spacing-4)',
    fontSize: 'var(--font-size-lg)',
  };
  ```

- **Combine tokens with component props**:
  ```typescript
  const getSizeStyles = (size: 'sm' | 'md' | 'lg') => {
    return {
      height: getButtonHeight(size),
      padding: getButtonPadding(size),
      fontSize: getFontSize(size === 'sm' ? 'sm' : size === 'lg' ? 'lg' : 'base'),
    };
  };
  ```

## CSS and Styling Standards

### Design Token Integration

- **Always use design tokens** instead of hardcoded values
- **Import global styles** that include token CSS custom properties:
  ```css
  @import '../tokens/globals.css';
  ```

### CSS Modules

- **Use CSS Modules** for component-specific styles
- **Follow BEM-like naming** for CSS classes:
  ```css
  .button { }                    /* Block */
  .button--primary { }           /* Modifier */
  .button__icon { }              /* Element */
  ```

### CSS Organization

1. **Import statements** first:
   ```css
   @import '../tokens/globals.css';
   ```

2. **Base styles** with token usage:
   ```css
   .component {
     /* Use design tokens */
     color: var(--color-primary-500);
     padding: var(--spacing-4);
     font-size: var(--font-size-base);
     border-radius: var(--border-radius-md);
     transition: all var(--transition-duration-fast) var(--transition-easing-ease-in-out);
   }
   ```

3. **Variants** grouped together:
   ```css
   /* Variants */
   .primary {
     background-color: var(--color-primary-500);
     color: white;
   }
   
   .primary:hover:not(:disabled) {
     background-color: var(--color-primary-600);
   }
   ```

4. **Sizes** grouped together:
   ```css
   /* Sizes */
   .sm {
     padding: var(--button-padding-sm);
     font-size: var(--font-size-sm);
     height: var(--button-height-sm);
   }
   ```

5. **States** (hover, focus, disabled):
   ```css
   .button:hover:not(:disabled) {
     background-color: var(--color-primary-600);
   }
   
   .button:disabled {
     opacity: 0.5;
     cursor: not-allowed;
   }
   ```

### CSS Properties

- **Use design tokens** for all values:
  ```css
  .component {
    color: var(--color-primary-500);
    padding: var(--spacing-4);
    margin: var(--spacing-2);
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    line-height: var(--line-height-tight);
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-md);
    z-index: var(--z-index-modal);
  }
  ```

- **Use logical properties** when possible:
  ```css
  margin-inline-start: var(--spacing-4);  /* Instead of margin-left */
  padding-block: var(--spacing-2);        /* Instead of padding-top/bottom */
  ```

- **Use component-specific tokens** for sizing:
  ```css
  .button {
    height: var(--button-height-md);
    padding: var(--button-padding-md);
  }
  
  .input {
    height: var(--input-height-md);
    padding: var(--input-padding-md);
  }
  ```

### Responsive Design

- **Mobile-first approach** with design token breakpoints:
  ```css
  .grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--spacing-4);
  }
  
  @media (min-width: var(--breakpoint-sm)) {
    .grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: var(--breakpoint-md)) {
    .grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  @media (min-width: var(--breakpoint-lg)) {
    .grid {
      grid-template-columns: repeat(4, 1fr);
    }
  }
  ```

- **Use utility classes** for responsive behavior:
  ```css
  .responsive-padding {
    padding: var(--spacing-2);
  }
  
  @media (min-width: var(--breakpoint-md)) {
    .responsive-padding {
      padding: var(--spacing-4);
    }
  }
  
  @media (min-width: var(--breakpoint-lg)) {
    .responsive-padding {
      padding: var(--spacing-6);
    }
  }
  ```

## File Naming Conventions

### Files and Directories

- **PascalCase** for component directories: `Button/`, `ProductList/`
- **PascalCase** for component files: `Button.tsx`, `ProductList.tsx`
- **camelCase** for utility files: `utils.ts`, `helpers.ts`
- **kebab-case** for configuration files: `eslint.config.mjs`, `next.config.ts`

### CSS Files

- **PascalCase.module.css** for CSS Modules: `Button.module.css`
- **globals.css** for global styles

### Storybook Files

- **ComponentName.stories.tsx** for story files
- **ComponentName.mock.json** for mock data
- **ComponentName.model.json** for type definitions

### Design Tokens Files

- **tokens.ts** for main token definitions
- **types.ts** for TypeScript type definitions
- **index.ts** for barrel exports and utilities
- **globals.css** for CSS custom properties and global styles

### UI Component Files

- **ComponentName.stories.tsx** for component showcase
- **ui/** directory for wrapper components and providers

## Import and Export Standards

### Barrel Exports

Each component directory should have an `index.ts` file for clean imports:

```typescript
// index.ts
export { ComponentName } from './ComponentName';
export type { ComponentNameProps } from './ComponentName';
```

### Import Organization

1. **React and React-related imports**
2. **Design tokens** (if needed for dynamic styling)
3. **Internal components** (grouped by hierarchy: atoms, molecules, organisms)
4. **Utilities and helpers**
5. **Types and interfaces**
6. **Styles and assets**

### Token Import Examples

```typescript
// Import specific token categories
import { colors, spacing, typography } from '@/tokens';

// Import utility functions
import { getColor, getSpacing, getFontSize } from '@/tokens';

// Import types for type safety
import type { ColorScale, SpacingKey, FontSizeKey } from '@/tokens';

// Import media query helpers
import { mediaQuery } from '@/tokens';
```

### Named vs Default Exports

- **Use named exports** for components:
  ```typescript
  export const Button: React.FC<ButtonProps> = () => {};
  ```

- **Use default exports** only for:
  - Next.js pages (`export default function Page()`)
  - Storybook meta configurations (`export default meta;`)
  - Configuration files

## Storybook Standards

### Story Structure

Each component must have comprehensive stories:

```typescript
import type { Meta, StoryObj } from '@storybook/react';
import { Component } from './Component';

const meta: Meta<typeof Component> = {
  title: 'Category/Component',
  component: Component,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    // Define controls for all interactive props
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    // Default props
  },
};
```

### Story Categories

- **Default**: Basic usage
- **Variants**: Different prop variations
- **States**: Loading, error, disabled states
- **Interactive**: Stories with controls
- **Examples**: Real-world usage scenarios

### Story Requirements

- **All interactive props** must have controls defined
- **Comprehensive examples** showing different use cases
- **Accessibility considerations** documented
- **Responsive behavior** tested with viewport addon

## Testing Standards

### Test Structure

- **Unit tests** for individual components
- **Integration tests** for component interactions
- **Visual regression tests** through Storybook
- **Accessibility tests** using Storybook a11y addon

### Test Files

- **ComponentName.test.tsx** for unit tests
- **ComponentName.stories.tsx** for visual tests
- **vitest.setup.ts** for test configuration

### Testing Best Practices

- **Test user interactions** and component behavior
- **Mock external dependencies**
- **Use semantic queries** (getByRole, getByLabelText)
- **Test accessibility** features
- **Cover edge cases** and error states

## Documentation Standards

### Component Documentation

Each component should include:

1. **Purpose and usage** description
2. **Props documentation** with types and descriptions
3. **Examples** of different use cases
4. **Accessibility considerations**
5. **Performance notes** if applicable

### Code Comments

- **Use JSDoc** for function documentation:
  ```typescript
  /**
   * Renders a product list with optional filtering and sorting
   * @param products - Array of products to display
   * @param onProductClick - Callback when a product is clicked
   */
  export const ProductList: React.FC<ProductListProps> = ({
    products,
    onProductClick,
  }) => {
    // Implementation
  };
  ```

- **Comment complex logic** and business rules
- **Avoid obvious comments** that don't add value

### README Files

- **Component READMEs** for complex components
- **Project README** with setup and development instructions
- **API documentation** for utilities and helpers

## Git and Version Control

### Commit Messages

Use conventional commit format:

```
type(scope): description

[optional body]

[optional footer]
```

Types: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`

### Branch Naming

- **feature/component-name** for new features
- **fix/issue-description** for bug fixes
- **refactor/component-name** for refactoring
- **docs/update-description** for documentation updates

### Pull Request Standards

- **Descriptive titles** and detailed descriptions
- **Link to related issues** or tickets
- **Include screenshots** for UI changes
- **Request reviews** from appropriate team members
- **Ensure all tests pass** before merging

## Code Quality Tools

### Linting and Formatting

- **ESLint** with Next.js and TypeScript configurations
- **Prettier** for code formatting (if configured)
- **TypeScript compiler** for type checking

### Pre-commit Hooks

Recommended pre-commit checks:
- Lint code
- Type check
- Run tests
- Format code

### Continuous Integration

- **Automated testing** on pull requests
- **Type checking** and linting
- **Build verification**
- **Deployment** to staging environment

## Performance Standards

### Component Performance

- **Use React.memo** for expensive components
- **Optimize re-renders** with proper dependency arrays
- **Lazy load** heavy components when appropriate
- **Minimize bundle size** with proper imports

### Image Optimization

- **Use Next.js Image component** for optimized images
- **Provide proper alt text** for accessibility
- **Use appropriate image formats** (WebP, AVIF when supported)

### Bundle Optimization

- **Tree shaking** friendly imports
- **Code splitting** at route level
- **Dynamic imports** for heavy libraries

## Security Standards

### Input Validation

- **Validate all user inputs**
- **Sanitize data** before processing
- **Use TypeScript** for compile-time type safety

### XSS Prevention

- **Avoid dangerouslySetInnerHTML** unless absolutely necessary
- **Sanitize HTML content** if needed
- **Use proper escaping** for user-generated content

### Dependencies

- **Keep dependencies updated**
- **Audit packages** for vulnerabilities
- **Use lock files** for reproducible builds

## Accessibility Standards

### WCAG Compliance

- **Follow WCAG 2.1 AA guidelines**
- **Test with screen readers**
- **Ensure keyboard navigation**
- **Provide proper color contrast**

### Semantic HTML

- **Use semantic elements** (button, nav, main, etc.)
- **Proper heading hierarchy** (h1, h2, h3)
- **Form labels** and associations
- **ARIA attributes** when needed

### Testing Accessibility

- **Storybook a11y addon** for automated checks
- **Manual testing** with assistive technologies
- **Color contrast testing**
- **Keyboard navigation testing**

---

## Enforcement

These standards should be enforced through:

1. **Code reviews** - All pull requests must follow these standards
2. **Automated tools** - ESLint, TypeScript, and Prettier configurations
3. **Documentation** - Keep this document updated as standards evolve
4. **Team training** - Regular reviews and updates on best practices

## Updates

This document should be reviewed and updated regularly to reflect:
- New technologies and patterns
- Team feedback and improvements
- Industry best practices
- Project-specific requirements

---

*Last updated: [Current Date]*
*Version: 1.0*
